#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {


        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        swapapp: swapapp {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <0 2 16 17 18 19>;
        };

        swapwindow: swapwindow {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WINDOW";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp GRAVE>, <&kt LGUI>;
            ignored-key-positions = <1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bootloader_combo {
            timeout-ms = <50>;  // max delay between keys
            key-positions = <4 5>; 
            bindings = <&bootloader>;
        };

        // enter_combo {
        //     timeout-ms = <50>;  // max delay between keys
        //     key-positions = <27 28>; 
        //     bindings = <&kp ENTER>;
        // };

        // backspace_combo {
        //     timeout-ms = <50>;  // max delay between keys
        //     key-positions = <26 27>; 
        //     bindings = <&kp BACKSPACE>;
        // };
    };

    macros {
        save: save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp S>;
            label = "SAVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp Q  &kp Y             &kp O        &kp U        &kp MINUS      /**/  &kp J          &kp G        &kp N  &kp F    &kp K
&kp H  &kp I             &kp E        &kp A        &kp DOT        /**/  &kp P          &kp D        &kp R  &kp S    &kp L
&kp X  &kp SINGLE_QUOTE  &kp SLASH    &kp COMMA    &kp SEMICOLON  /**/  &kp B          &kp C        &kp M  &kp W    &kp V
                         &sl 2        &lt 1 T      &kp TAB        /**/  &kp BACKSPACE  &lt 4 SPACE  &sl 3
            >;
        };

        Nav {
            bindings = <
&trans     &swapwindow  &swapapp   &trans     &trans  /**/  &trans  &trans          &trans        &trans      &trans
&trans     &kp LG(A)    &kp LG(S)  &kp LG(C)  &trans  /**/  &trans  &kp LEFT        &kp DOWN      &kp UP      &kp RIGHT 
&kp LG(W)  &kp LG(Z)    &kp LG(X)  &kp LG(V)  &trans  /**/  &trans  &kp BACKSPACE   &kp ENTER     &kp ESCAPE  &trans
                        &trans     &trans     &trans  /**/  &trans  &trans          &trans
            >;
        };

        Num {
            bindings = <
&kp TAB   &trans     &trans    &trans     &trans  /**/  &trans  &kp N7  &kp N8  &kp N9  &kp BACKSPACE
&sk LALT  &sk LCTRL  &sk LGUI  &sk LSHFT  &trans  /**/  &kp Z   &kp N4  &kp N5  &kp N6  &kp ENTER
&trans    &trans     &trans    &sk LALT   &trans  /**/  &kp N0  &kp N1  &kp N2  &kp N3  &kp ESCAPE
                     &trans    &trans     &trans  /**/  &trans  &trans  &trans
            >;
        };

        Sym {
            bindings = <
&kp TAB  &trans  &trans  &trans  &trans  /**/  &trans  &trans      &trans    &trans     &trans
&trans   &trans  &trans  &trans  &trans  /**/  &trans  &sk LSHFT   &sk LGUI  &sk LCTRL  &kp ENTER
&trans   &trans  &trans  &trans  &trans  /**/  &trans  &kp ESCAPE  &trans    &trans     &kp ESCAPE
                 &trans  &trans  &trans  /**/  &trans  &trans      &trans
            >;
        };

        Win {
            bindings = <
&trans         &trans         &trans         &trans                 &trans  /**/  &trans  &trans         &trans         &trans         &trans
&kp LG(LC(J))  &kp LG(LC(L))  &kp LG(LC(O))  &kp LG(LC(SEMICOLON))  &trans  /**/  &trans  &trans         &trans         &trans         &trans
&trans         &trans         &trans         &trans                 &trans  /**/  &trans  &trans         &trans         &trans         &trans
                              &trans         &trans                 &trans  /**/  &trans  &trans         &trans
            >;
        };
    };
};
